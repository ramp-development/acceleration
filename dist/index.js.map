{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/initCopyURL.ts", "../src/utils/createElement.ts", "../src/utils/initSplide.ts", "../src/localisation/cases/handleMarketParamter.ts", "../src/localisation/utils/placeElementAt.ts", "../src/localisation/cases/handleMarketPriority.ts", "../src/localisation/utils/fetchMarketContent.ts", "../src/localisation/cases/handleMarketTargets.ts", "../src/localisation/utils/createElementPlaceholder.ts", "../src/localisation/utils/removedElementsMap.ts", "../src/localisation/cases/handleMarketVisibility.ts", "../src/localisation/utils/applyMarket.ts", "../src/localisation/utils/queryElements.ts", "../src/localisation/index.ts", "../src/pages/about.ts", "../src/pages/careers/jobs.ts", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.0/node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../src/pages/careers/modals.ts", "../src/pages/careers/index.ts", "../src/pages/resources.ts", "../src/pages/services.ts", "../src/pages/index.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const initCopyURL = () => {\n  const URL = window.location.href;\n  const copyURLs = [...document.querySelectorAll('[data-copy-url]')];\n  copyURLs.forEach((copyURL) => {\n    copyURL.addEventListener('click', () => {\n      navigator.clipboard.writeText(URL);\n    });\n  });\n};\n", "/**\n * A function to programatically create an element of any type\n * @param type what type of element is it\n * @param location to what element should it be added as a child to\n * @param options what additional items should be added, e.g. class, dataset, text, callback or attribute\n * @returns the HTML element\n */\n\nexport const createElement = (\n  type: string,\n  location: HTMLHeadElement | HTMLBodyElement,\n  options = {}\n) => {\n  const element = document.createElement(type);\n\n  Object.entries(options).forEach(([key, value]) => {\n    if (key === 'class') {\n      element.classList.add(value);\n      return;\n    }\n\n    if (key === 'dataset') {\n      Object.entries(value).forEach(([dataKey, dataValue]) => {\n        element.dataset[dataKey] = dataValue;\n      });\n      return;\n    }\n\n    if (key === 'text') {\n      element.textContent = value;\n      return;\n    }\n\n    if (key === 'callback') {\n      element.onload = value;\n      return;\n    }\n\n    element.setAttribute(key, value);\n  });\n\n  location.appendChild(element);\n  return element;\n};\n", "import { createElement } from './createElement';\n\nexport const initSplide = () => {\n  createElement('script', document.head, {\n    src: 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js',\n    callback: init,\n  });\n\n  function init() {\n    const sliders = [...document.querySelectorAll('.splide')];\n    sliders.forEach((slider) => {\n      const component = new Splide(slider, {\n        type: 'loop',\n        gap: '2.5rem',\n        perPage: 3,\n        perMove: 1,\n        breakpoints: {\n          991: {\n            perPage: 2,\n            gap: '2.5rem',\n          },\n          767: {\n            perPage: 1,\n            gap: '2.5rem',\n          },\n        },\n      });\n      component.mount();\n    });\n  }\n};\n", "export const handleMarketParameter = (value: string): void => {\n  // Create a URL object\n  const urlObject = new URL(window.location.href);\n\n  // Set the new value for the market parameter\n  urlObject.searchParams.set('market', value);\n\n  // Use history.pushState to change the URL in the address bar without reloading\n  history.pushState({}, '', urlObject.toString());\n\n  // Save the new value in the local storage\n  sessionStorage.setItem('market', value);\n};\n", "/**\n * Places and renders an HTMLElement at a given index in a parent element.\n *\n * @param parent - The parent HTML element.\n * @param element - The HTML element to be inserted.\n * @param index - The index at which the element should be inserted.\n */\nexport const placeElementAt = (parent: HTMLElement, element: HTMLElement, index: number): void => {\n  // Ensure the index is within bounds\n  index = Math.max(0, Math.min(index, parent.children.length));\n\n  // If index is the last, append element at the end\n  if (index === parent.children.length) {\n    parent.appendChild(element);\n  } else {\n    // Otherwise, insert the element before the child at the given index\n    parent.insertBefore(element, parent.children[index]);\n    const newIndex = [...parent.childNodes].indexOf(element);\n    if (newIndex !== index) {\n      parent.insertBefore(element, parent.children[index]);\n    }\n  }\n};\n", "import { placeElementAt } from '../utils/placeElementAt';\n\n/**\n * Adjust the position of the elements based on their \"data-priority-in\" and \"data-priority-order\" attributes\n *\n * @param market - The current market\n * @param elements - A list of elements to reposition based on their priority\n */\nexport const handleMarketPriority = (market: string, elements: HTMLDivElement[]): void => {\n  elements.forEach((element) => {\n    // Get the market for which the element should be prioritized\n    const { priorityIn } = element.dataset;\n    if (priorityIn === market) {\n      // Get the order in which the element should be prioritized and the parent element\n      const { priorityOrder } = element.dataset;\n      const parent = element.parentElement;\n      if (!priorityOrder || !parent) return;\n      placeElementAt(parent, element, Number(priorityOrder) - 1);\n    }\n  });\n};\n", "/**\n * Fetches the market data from the given link and returns a parsed HTML document\n */\nexport const fetchMarketContent = (link: string): Promise<Document> => {\n  return fetch(link)\n    .then((response) => response.text())\n    .then((html) => {\n      const parser = new DOMParser();\n      return parser.parseFromString(html, 'text/html');\n    });\n};\n", "import type { Market } from '../type';\nimport { fetchMarketContent } from '../utils/fetchMarketContent';\n\n/**\n * Fetches the market data and updates the localized elements\n *\n * @param market - The current market\n * @param elements - A list of elements to dynamically update and replace content for\n */\nexport const handleMarketTargets = (market: Market, elements: HTMLDivElement[]): void => {\n  // Get the values of the target elements to match up to on the market page\n  const targetElementValues = elements.map((target) => target.dataset.targetFor);\n\n  // Fetch the market data and find the corresponding elements\n  fetchMarketContent(market.link)\n    .then((doc) => {\n      // find the relevant elements on the market page and return the parent and element itself\n      const childElements = targetElementValues.map((targetElementValue) => {\n        const element = doc.querySelector<HTMLDivElement>(\n          `[data-child-for=\"${targetElementValue}\"]`\n        );\n        return { parent: targetElementValue, element };\n      });\n\n      // Find the parent elements on page and replace their child content with the new content\n      childElements.forEach(({ parent, element }) => {\n        const parentElement = document.querySelector<HTMLDivElement>(\n          `[data-target-for=\"${parent}\"]`\n        );\n        if (parentElement && element) {\n          parentElement.replaceChildren(element);\n        }\n      });\n    })\n    .catch((error) => console.error(error));\n};\n", "/**\n * Converts an HTML element to a comment node that contains the market info\n */\nexport const createElementPlaceholder = (element: HTMLElement, market: string): Comment => {\n  return document.createComment(`Placeholder for element with market: ${market}`);\n};\n", "// Store removed elements in a map\nexport const removedElementsMap: Record<\n  string,\n  { placeholder: Comment; element: HTMLElement; originalIndex: number }[]\n> = {};\n", "import { createElementPlaceholder } from '../utils/createElementPlaceholder';\nimport { removedElementsMap } from '../utils/removedElementsMap';\n\n/**\n * Handles the visibility of elements based on the selected market and attributes applied\n *\n * @param market - The current market\n * @param elements - A list of elements to dynamically hide and show based on the market\n * @param visible - Whether the elements should be visible or not during the given market, the opposite will be applied elsewhere\n */\nexport const handleMarketVisibility = (\n  market: string,\n  elements: HTMLDivElement[],\n  visible: boolean\n): void => {\n  elements.forEach((element) => {\n    const { showIn } = element.dataset;\n    if (!showIn) return;\n\n    // If the element is global, always show it\n    if (showIn === 'Global') return;\n\n    // If there are elements for the selected market, show and sort them otherwise remove and store them\n    if (showIn === market && removedElementsMap[market]) {\n      removedElementsMap[market].forEach(({ placeholder, element }) => {\n        placeholder.replaceWith(element);\n      });\n      delete removedElementsMap[market]; // Clear the map entry for this market\n    } else if (showIn !== market) {\n      // create a placeholder and replace the element to be removed with it\n      const placeholder = createElementPlaceholder(element, showIn);\n      element.replaceWith(placeholder);\n\n      // create a map entry for the market if it doesn't exist\n      if (!removedElementsMap[showIn]) removedElementsMap[showIn] = [];\n\n      // store the element and its placeholder in the map\n      const originalIndex = Array.from(element.parentElement?.children || []).indexOf(element);\n      removedElementsMap[showIn].push({ placeholder, element, originalIndex });\n    }\n  });\n};\n", "/**\n * Fetches the \"market\" query parameter from the current URL or session storage\n * and applies the value to the market select\n *\n * @param marketSelect - The market select element\n */\nexport const applyMarket = (marketSelect: HTMLSelectElement): void => {\n  // Fetch the \"market\" query parameter from the URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const marketParam = urlParams.get('market');\n  const market = marketParam ? marketParam : sessionStorage.getItem('market');\n\n  console.log(marketParam);\n  console.log(sessionStorage.getItem('market'));\n  console.log(market);\n  if (!market) return;\n\n  // Check if the market exists in the select options\n  const optionExists = Array.from(marketSelect.options).some((option) => option.value === market);\n  if (!optionExists) return;\n\n  // Apply the value to the select if it exists\n  marketSelect.value = market;\n\n  // Emit the \"change\" event to trigger any attached event handlers\n  marketSelect.dispatchEvent(new Event('change'));\n};\n", "/**\n * Retrieves the DOM elements based on the provided query and returns them in an array\n */\nexport const queryElements = <T extends HTMLElement>(\n  query: string,\n  parent: Element | Document = document\n): T[] => {\n  const elements = parent.querySelectorAll<T>(query);\n  return elements.length ? [...elements] : [];\n};\n", "import { handleMarketParameter } from './cases/handleMarketParamter';\nimport { handleMarketPriority } from './cases/handleMarketPriority';\nimport { handleMarketTargets } from './cases/handleMarketTargets';\nimport { handleMarketVisibility } from './cases/handleMarketVisibility';\nimport type { LocalisedElements, Market } from './type';\nimport { applyMarket } from './utils/applyMarket';\nimport { queryElements } from './utils/queryElements';\n\nexport const localisation = () => {\n  // Get references to the market select and the market list and selector elements\n  const marketSelect = document.querySelector<HTMLSelectElement>('[data-localise=\"market-select\"]');\n  const marketList = document.querySelector<HTMLDivElement>('[data-localise=\"market-list\"]');\n  const selectorLanguage = document.querySelector<HTMLDivElement>(\n    '[data-localise=\"selector-language\"]'\n  );\n  const selectorIcons = queryElements<HTMLImageElement>('[data-localise=\"selector-icon\"]');\n\n  // Stop execution if necessary elements are not found\n  if (!marketSelect || !marketList) return;\n  if (!selectorLanguage || !selectorIcons.length) return;\n\n  // Create a markets array from the links found within the market list\n  const marketLinks = queryElements<HTMLAnchorElement>('[data-localise=\"market-link\"]', marketList);\n  const marketIcons = queryElements<HTMLImageElement>('[data-localise=\"market-icon\"]', marketList);\n  const markets = marketLinks\n    .filter((marketLink) => Boolean(marketLink.textContent)) // Filter out marketLinks without textContent\n    .map((marketLink, index) => ({\n      id: marketLink.textContent,\n      link: marketLink.href,\n      icon: marketIcons[index],\n    }));\n\n  // Get target elements and their values for later usage\n  const targetElements = queryElements<HTMLDivElement>('[data-target-for]');\n\n  // Get showIn elements\n  const showInElements = queryElements<HTMLDivElement>('[data-show-in]');\n  const hideInElements = queryElements<HTMLDivElement>('[data-hide-in]');\n\n  // Get priorityIn elements\n  const priorityInElements = queryElements<HTMLDivElement>(\n    '[data-priority-in][data-priority-order]'\n  );\n\n  // Group elements into one object\n  const elements: LocalisedElements = {\n    targetElements,\n    showInElements,\n    priorityInElements,\n    hideInElements,\n  };\n\n  // Adding an event listener to update the UI when market selection changes\n  marketSelect.addEventListener('change', (event) => {\n    // Get the current market value and find the corresponding market object\n    const { value } = event.target as HTMLSelectElement;\n    const market = markets.find((market) => market.id === value) as Market;\n    if (!market) return;\n\n    handleMarketParameter(market.id);\n    handleMarketTargets(market, elements.targetElements);\n    handleMarketVisibility(market.id, elements.showInElements, true);\n    handleMarketVisibility(market.id, elements.hideInElements, false);\n    handleMarketPriority(market.id, elements.priorityInElements);\n\n    selectorIcons.forEach((selectorIcon) => {\n      selectorIcon.src = market.icon.src;\n      selectorIcon.alt = market.icon.alt;\n    });\n  });\n\n  marketSelect.addEventListener('marketSelectReady', () => {\n    // Apply the market from the query parameter or local storage\n    applyMarket(marketSelect);\n\n    // Handling initial market-specific visibility of elements\n    handleMarketVisibility(marketSelect.value, elements.showInElements);\n    handleMarketPriority(marketSelect.value, elements.priorityInElements);\n  });\n\n  // dispatch event once the market select element is ready\n  const numberOfMarkets = markets.length;\n  if (marketSelect.options.length === numberOfMarkets) {\n    const event = new Event('marketSelectReady');\n    marketSelect.dispatchEvent(event);\n  } else {\n    // Create a MutationObserver to observe the market select element\n    const observer = new MutationObserver((mutationsList, observer) => {\n      // Check if the number of options in the select element has reached the target\n      if (marketSelect.options.length === markets.length) {\n        // Stop observing\n        observer.disconnect();\n        // Create and dispatch the event\n        const event = new Event('marketSelectReady');\n        marketSelect.dispatchEvent(event);\n      }\n    });\n\n    // Start observing the select element with the configured parameters\n    observer.observe(marketSelect, { childList: true });\n  }\n};\n", "import { createElement } from '$utils/createElement';\n\nexport const about = () => {\n  console.log('about');\n\n  // shift the page when a select is changed\n  const selects = document.querySelectorAll<HTMLSelectElement>('select');\n  selects.forEach((select) => {\n    const { mirrorValue } = select.dataset;\n    if (!mirrorValue) return;\n    const mirrorTarget = document.querySelector<HTMLHeadingElement>(\n      `[data-mirror-target=\"${mirrorValue}\"]`\n    );\n\n    select.addEventListener('change', (event) => {\n      let { value } = event.target as HTMLSelectElement;\n      if (value === '') value = event.target.dataset.mirrorDefault ?? '';\n      mirrorTarget.textContent = value;\n      setTimeout(() => {\n        window.scrollBy(0, 1);\n        window.scrollBy(0, -1);\n      }, 200);\n    });\n  });\n\n  // add options to the leadership select\n  const select = document.querySelector<HTMLSelectElement>('select[name=\"Leadership\"]');\n  const markets = document.querySelectorAll<HTMLDivElement>(\n    '.w-dyn-item [fs-cmsfilter-field=\"market\"]'\n  );\n\n  const marketsArray: string[] = [];\n  markets.forEach((market) => {\n    if (market.textContent) marketsArray.push(market.textContent);\n  });\n  const marketsSet = new Set(marketsArray.sort());\n\n  marketsSet.forEach((market) => {\n    const option = new Option(market, market);\n    if (select) select.add(option);\n  });\n\n  createElement('script', document.head, {\n    src: 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-cmsfilter@1/cmsfilter.js',\n    async: true,\n  });\n};\n", "import type { CMSFilters } from '../../types/CMSFilters';\nimport type { Job } from './job';\n\nexport const jobs = () => {\n  console.log('jobs');\n\n  /**\n   * Populate CMS Data from an external API.\n   */\n  window.fsAttributes = window.fsAttributes || [];\n  window.fsAttributes.push([\n    'cmsfilter',\n    async (filtersInstances: CMSFilters[]) => {\n      const [filtersInstance] = filtersInstances;\n      const { listInstance } = filtersInstance;\n      const [firstItem] = listInstance.items;\n      const itemTemplateElement = firstItem.element;\n\n      // Fetch external data\n      const jobs = await fetchJobs();\n\n      // Remove existing items\n      listInstance.clearItems();\n\n      // Create the new items\n      const newItems = jobs.map((job: Job) => createItem(job, itemTemplateElement));\n\n      // Populate the list\n      await listInstance.addItems(newItems);\n\n      // Get the filter lists\n      const filterLists = filtersInstance.form.querySelectorAll<HTMLDivElement>(\n        '[data-element=\"filter-list\"]'\n      );\n\n      // Loop through each filter list\n      for (const filterList of filterLists) {\n        // Get the template filter\n        const filterTemplateElement =\n          filterList.querySelector<HTMLLabelElement>('[data-element=\"filter\"]');\n        if (!filterTemplateElement) return;\n\n        // Get the parent wrapper\n        const filtersWrapper = filterTemplateElement.parentElement;\n        if (!filtersWrapper) return;\n\n        // Remove the template from the DOM\n        filterTemplateElement.remove();\n\n        // Collect the required property\n        const { property } = filterList.dataset;\n        if (!property) return;\n        const propertyValues = collectProperties(jobs, property as keyof Job);\n\n        // Create the new filters and append the to the parent wrapper\n        for (const propertyValue of propertyValues) {\n          const newFilter = createFilter(propertyValue as keyof Job, filterTemplateElement);\n          if (!newFilter) continue;\n\n          filtersWrapper.append(newFilter);\n        }\n      }\n\n      // Sync the CMSFilters instance with the new created filters\n      filtersInstance.storeFiltersData();\n    },\n  ]);\n\n  /**\n   * Fetches fake products from Fake Store API.\n   * @returns An array of {@link Product}.\n   */\n  const fetchJobs = async () => {\n    const config = {\n      emea: {\n        api: 'groupmemea_jobfeedapi_key',\n        sc: 'a1d19b3f3a21cdde1558794436300152',\n        subsidiaryName: 'Acceleration',\n      },\n      northAmerica: {\n        api: 'groupmnorthamerica_jobfeedapi_key',\n        sc: '60497c5c1cfa4d58341ec4060be40b2f',\n        subsidiaryName: 'GroupM%20Nexus%20Acceleration',\n      },\n    };\n\n    const endpoints: string[] = [];\n    Object.values(config).forEach((value) => {\n      endpoints.push(\n        `https://api.jobvite.com/api/v2/job?api=${value.api}&sc=${value.sc}&subsidiaryName=${value.subsidiaryName}`\n      );\n    });\n\n    const promises = endpoints.map((endpoint) => fetch(endpoint));\n\n    return Promise.all(promises)\n      .then((responses) => {\n        return Promise.all(responses.map((response) => response.json()));\n      })\n      .then((data) => {\n        const combinedList = data.reduce((acc, curr) => acc.concat(curr.requisitions), []);\n        return combinedList;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  /**\n   * Creates an item from the template element.\n   * @param product The product data to create the item from.\n   * @param templateElement The template element.\n   *\n   * @returns A new Collection Item element.\n   */\n  const createItem = (job: Job, templateElement: HTMLDivElement) => {\n    // Clone the template element\n    const newItem = templateElement.cloneNode(true) as HTMLDivElement;\n\n    // Query inner elements\n    const title = newItem.querySelector<HTMLHeadingElement>('[data-job=\"title\"]');\n    const description = newItem.querySelector<HTMLDivElement>('[data-job=\"description\"]');\n    const country = newItem.querySelector<HTMLDivElement>('[data-job=\"country\"]');\n    const department = newItem.querySelector<HTMLDivElement>('[data-job=\"department\"]');\n    const apply = newItem.querySelector<HTMLAnchorElement>('[data-job=\"apply\"]');\n\n    // Populate inner elements\n    if (title) title.textContent = job.title;\n    if (description) description.textContent = job.briefDescription;\n    if (country) country.textContent = job.location;\n    if (department) department.textContent = job.category;\n    if (apply) apply.href = job.detailLink;\n\n    return newItem;\n  };\n\n  /**\n   * Collects all values for a given property from the jobs data.\n   * @param jobs The jobs data.\n   * @param property The property to collect.\n   *\n   * @returns An array of {@link Job} countries.\n   */\n  const collectProperties = <K extends keyof Job>(jobs: Job[], property: K) => {\n    const propertySet: Set<Job[K]> = new Set();\n\n    for (const job of jobs) {\n      propertySet.add(job[property]);\n    }\n\n    return [...propertySet];\n  };\n\n  /**\n   * Creates a new checkbox from the template element.\n   * @param category The filter value.\n   * @param templateElement The template element.\n   *\n   * @returns A new checkbox filter.\n   */\n  const createFilter = <V extends keyof Job>(\n    propertyValue: V,\n    templateElement: HTMLLabelElement\n  ) => {\n    // Clone the template element\n    const newFilter = templateElement.cloneNode(true) as HTMLLabelElement;\n\n    // Query inner elements\n    const label = newFilter.querySelector('span');\n    const radio = newFilter.querySelector('input');\n\n    if (!label || !radio) return;\n\n    // Populate inner elements\n    label.textContent = propertyValue;\n    radio.value = propertyValue;\n\n    return newFilter;\n  };\n};\n", "/**\n * Dispatches a custom event that bubbles from the target.\n * @param target The element where the event will originate.\n * @param events The event name or an array of event names.\n * @returns True if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n */\nexport const simulateEvent = (target, events) => {\n    if (!Array.isArray(events))\n        events = [events];\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\n    return eventsSuccess.every((success) => success);\n};\n", "import { simulateEvent } from '@finsweet/ts-utils';\n\nexport const modals = () => {\n  console.log('modals');\n\n  let modalButtons = [...document.querySelectorAll('[data-modal-button]')];\n  const modalTriggers = [...document.querySelectorAll('[data-modal-trigger]')];\n\n  const arrowButtons = [...document.querySelectorAll('.splide__arrows')];\n  arrowButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      modalButtons = [...document.querySelectorAll('[data-modal-button]')];\n      updateEventListeners();\n    });\n  });\n\n  const updateEventListeners = () => {\n    modalButtons.forEach((button) => {\n      button.removeEventListener('click', openModal);\n      button.addEventListener('click', openModal);\n    });\n  };\n\n  const openModal = (event) => {\n    const button = event.currentTarget;\n    const modalSlug = button.dataset.modalButton;\n    const modalTrigger = modalTriggers.find(\n      (trigger) => trigger.dataset.modalTrigger === modalSlug\n    );\n    simulateEvent(modalTrigger, 'click');\n  };\n\n  updateEventListeners();\n};\n", "import { jobs } from './jobs';\nimport { modals } from './modals';\n\nexport const careers = () => {\n  jobs();\n  modals();\n};\n", "export const resources = () => {\n  console.log('resources');\n\n  const filtersWrapper = document.querySelector('[fs-cmsfilter-element=\"filters\"]');\n  const filters = [...filtersWrapper?.querySelectorAll('input')];\n  filters.forEach((filter) => {\n    const name = filter.dataset.inputName;\n    const id = name.toLowerCase().replace(/\\s+/g, '-');\n    filter.name = name;\n    filter.id = id;\n\n    const label = filter.nextElementSibling;\n    label.setAttribute('for', filter.id);\n  });\n\n  const dropdowns = [...document.querySelectorAll('[data-filter=\"dropdown\"]')];\n  dropdowns.forEach((dropdown) => {\n    const textToggle = dropdown.querySelector('[data-filter-toggle=\"text\"]'),\n      selectToggle = dropdown.querySelector('[data-filter-toggle=\"select\"]'),\n      selectedToggle = dropdown.querySelector('[data-filter-toggle=\"selected\"]'),\n      additionalToggle = dropdown.querySelector('[data-filter-toggle=\"additional\"]'),\n      toggles = [textToggle, selectToggle, selectedToggle, additionalToggle];\n\n    const filters = [...dropdown.querySelectorAll('input')];\n\n    filters.forEach((filter) => {\n      filter.addEventListener('change', (event) => {\n        toggles.forEach((toggle) => (toggle.style.display = 'none'));\n\n        const selected = [...dropdown.querySelectorAll('input:checked')];\n        const selectedValues = selected.map((input) => input.dataset.inputName);\n\n        console.log(selectedValues);\n\n        if (selectedValues.length === 0) {\n          textToggle.style.display = 'block';\n        } else if (selectedValues.length === 1) {\n          selectedToggle.textContent = selectedValues[0];\n          selectedToggle.style.display = 'inline';\n        } else if (selectedValues.length > 1) {\n          selectedToggle.textContent = `${selectedValues[0]},\u00A0`;\n          selectedToggle.style.display = 'inline';\n\n          additionalToggle.textContent = `+${selectedValues.length - 1}`;\n          additionalToggle.style.display = 'inline';\n        }\n      });\n    });\n  });\n};\n", "import { createElement } from '$utils/createElement';\n\nexport const services = () => {\n  let numberLoaded = 0;\n  createElement('script', document.head, {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js',\n    defer: true,\n    callback: init,\n  });\n  createElement('script', document.head, {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js',\n    defer: true,\n    callback: init,\n  });\n\n  const sticky = document.querySelector('[data-sticky=\"vertical-center\"]');\n  const top = `${(window.innerHeight - sticky.offsetHeight) / 2}px`;\n  sticky.style.top = top;\n\n  function init() {\n    numberLoaded += 1;\n    if (numberLoaded !== 2) return;\n\n    gsap.registerPlugin(ScrollTrigger);\n\n    const header = document.querySelector('.capabilities_header'),\n      items = [...document.querySelectorAll('.capabilities_list-item')],\n      targets = [...document.querySelectorAll('.capabilities_illustration')];\n\n    const mm = gsap.matchMedia();\n    mm.add('(min-width: 768px)', () => {\n      // const headerTl = gsap.timeline({\n      //   scrollTrigger: {\n      //     trigger: header,\n      //     start: `top ${top}`,\n      //     end: `bottom ${top}`,\n      //     scrub: true,\n      //   },\n      // });\n\n      // headerTl.to(targets, { opacity: 0.15, duration: 1 });\n\n      items.forEach((item, index) => {\n        const timeline = gsap.timeline({\n          scrollTrigger: {\n            trigger: item,\n            start: 'top 50%',\n            end: 'bottom 50%',\n            scrub: 1,\n          },\n        });\n\n        const target = targets.find((target) => target.classList.contains(`is-${index + 1}`));\n\n        timeline.to(target, { opacity: 1, duration: 1 });\n        // timeline.to(target, { opacity: 0.15, duration: 1 }, '<2');\n      });\n    });\n  }\n};\n", "import { about } from './about';\nimport { careers } from './careers';\nimport { resources } from './resources';\nimport { services } from './services';\n\nexport const pages = () => {\n  const { pathname } = window.location;\n  switch (pathname) {\n    case '/about-us':\n      about();\n      break;\n    case '/services':\n      services();\n      break;\n    case '/resources':\n      resources();\n      break;\n    case '/careers':\n      careers();\n      break;\n  }\n};\n", "import { initCopyURL } from '$utils/initCopyURL';\nimport { initSplide } from '$utils/initSplide';\n\nimport { localisation } from './localisation';\nimport { pages } from './pages';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  console.log('index');\n\n  localisation();\n  pages();\n\n  const hasSplide = document.querySelector('.splide');\n  if (hasSplide) initSplide();\n\n  const hasCopyURL = document.querySelector('[data-copy-url]');\n  if (hasCopyURL) initCopyURL();\n});\n"],
  "mappings": "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",
  "names": ["URL", "location", "element", "market", "observer", "select", "jobs", "filters", "target"]
}
