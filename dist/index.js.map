{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/initCopyURL.ts", "../src/utils/createElement.ts", "../src/utils/initSplide.ts", "../src/utils/queryElement.ts", "../src/utils/queryElements.ts", "../src/localisation/utils/createElementPlaceholder.ts", "../src/localisation/utils/fetchMarketContent.ts", "../src/localisation/utils/placeElementAt.ts", "../src/localisation/classes/marketSensitiveElement.ts", "../src/localisation/market/handleMarketParamter.ts", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.0/node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.0/node_modules/@finsweet/ts-utils/dist/webflow/getSiteId.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.0/node_modules/@finsweet/ts-utils/dist/webflow/restartWebflow.js", "../src/localisation/utils/shiftPage.ts", "../src/localisation/market/handleMarketSensitiveElements.ts", "../src/localisation/market/handleMirrorElements.ts", "../src/localisation/utils/applyMarket.ts", "../src/localisation/index.ts", "../src/pages/about.ts", "../src/pages/careers/jobs.ts", "../src/pages/careers/modals.ts", "../src/pages/careers/index.ts", "../src/pages/resources/dropdowns.ts", "../src/pages/resources/filters.ts", "../src/utils/isWithinLastXTime.ts", "../src/utils/stringToDate.ts", "../src/pages/resources/localisation.ts", "../src/pages/resources/index.ts", "../src/pages/services.ts", "../src/pages/index.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const initCopyURL = () => {\n  const URL = window.location.href;\n  const copyURLs = [...document.querySelectorAll('[data-copy-url]')];\n  copyURLs.forEach((copyURL) => {\n    copyURL.addEventListener('click', () => {\n      navigator.clipboard.writeText(URL);\n    });\n  });\n};\n", "/**\n * A function to programatically create an element of any type\n * @param type what type of element is it\n * @param location to what element should it be added as a child to\n * @param options what additional items should be added, e.g. class, dataset, text, callback or attribute\n * @returns the HTML element\n */\n\nexport const createElement = (\n  type: string,\n  location: HTMLHeadElement | HTMLBodyElement,\n  options = {}\n) => {\n  const element = document.createElement(type);\n\n  Object.entries(options).forEach(([key, value]) => {\n    if (key === 'class') {\n      element.classList.add(value);\n      return;\n    }\n\n    if (key === 'dataset') {\n      Object.entries(value).forEach(([dataKey, dataValue]) => {\n        element.dataset[dataKey] = dataValue;\n      });\n      return;\n    }\n\n    if (key === 'text') {\n      element.textContent = value;\n      return;\n    }\n\n    if (key === 'callback') {\n      element.onload = value;\n      return;\n    }\n\n    element.setAttribute(key, value);\n  });\n\n  location.appendChild(element);\n  return element;\n};\n", "import { createElement } from './createElement';\n\nexport const initSplide = () => {\n  createElement('script', document.head, {\n    src: 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js',\n    callback: init,\n  });\n\n  function init() {\n    const sliders = [...document.querySelectorAll('.splide')];\n    sliders.forEach((slider) => {\n      const component = new Splide(slider, {\n        type: 'loop',\n        gap: '2.5rem',\n        perPage: 3,\n        perMove: 1,\n        breakpoints: {\n          991: {\n            perPage: 2,\n            gap: '2.5rem',\n          },\n          767: {\n            perPage: 1,\n            gap: '2.5rem',\n          },\n        },\n      });\n      component.mount();\n\n      document.addEventListener('refreshSplide', () => {\n        component.refresh();\n      });\n    });\n  }\n};\n", "/**\n * Retrieves the DOM element based on the provided query and returns them in an array\n */\nexport const queryElement = <T extends HTMLElement>(\n  query: string,\n  parent: Element | Document = document\n): T | undefined => {\n  const element = parent.querySelector<T>(query);\n  return element ?? undefined;\n};\n", "/**\n * Retrieves the DOM elements based on the provided query and returns them in an array\n */\nexport const queryElements = <T extends HTMLElement>(\n  query: string,\n  parent: Element | Document = document\n): T[] => {\n  const elements = parent.querySelectorAll<T>(query);\n  return elements.length ? [...elements] : [];\n};\n", "/**\n * Converts an HTML element to a comment node that contains the market info\n * @returns - A comment node\n */\nexport const createElementPlaceholder = (): Comment => {\n  return document.createComment(`* placeholder * for element`);\n};\n", "/**\n * Fetches the market data from the given link and returns a parsed HTML document\n */\nexport const fetchMarketContent = (link: string): Promise<Document> => {\n  return fetch(link)\n    .then((response) => response.text())\n    .then((html) => {\n      const parser = new DOMParser();\n      return parser.parseFromString(html, 'text/html');\n    });\n};\n", "/**\n * Places and renders an HTMLElement at a given index in a parent element.\n *\n * @param parent - The parent HTML element.\n * @param element - The HTML element to be inserted.\n * @param index - The index at which the element should be inserted.\n */\nexport const placeElementAt = (parent: HTMLElement, element: HTMLElement, index: number): void => {\n  // Ensure the index is within bounds\n  index = Math.max(0, Math.min(index, parent.children.length));\n\n  // If index is the last, append element at the end\n  if (index === parent.children.length) {\n    parent.appendChild(element);\n  } else {\n    // Otherwise, insert the element before the child at the given index\n    parent.insertBefore(element, parent.children[index]);\n    const newIndex = [...parent.childNodes].indexOf(element);\n    if (newIndex !== index) {\n      parent.insertBefore(element, parent.children[index]);\n    }\n  }\n};\n", "import type { Market } from '../type';\nimport { createElementPlaceholder } from '../utils/createElementPlaceholder';\nimport { fetchMarketContent } from '../utils/fetchMarketContent';\nimport { placeElementAt } from '../utils/placeElementAt';\n\nexport class MarketSensitiveElement {\n  private element: HTMLElement;\n  private targetFor: string[];\n  private showIn: string[];\n  private hideIn: string[];\n  private priorityIn: string | null;\n  private priorityOrder: number | null;\n  private isVisible: boolean;\n  private placeholder: Comment;\n  private clone: HTMLElement;\n\n  constructor(element: HTMLElement) {\n    this.element = element;\n\n    const { targetFor } = this.element.dataset;\n    this.targetFor = targetFor ? targetFor.split(', ') : [];\n\n    const { showIn } = this.element.dataset;\n    this.showIn = showIn ? showIn.split(', ') : [];\n\n    const { hideIn } = this.element.dataset;\n    this.hideIn = hideIn ? hideIn.split(', ') : [];\n\n    const { priorityIn } = this.element.dataset;\n    this.priorityIn = priorityIn ?? null;\n\n    const priorityOrderAttr = this.element.getAttribute('data-priority-order');\n    this.priorityOrder = priorityOrderAttr ? Number(priorityOrderAttr) : null;\n\n    this.isVisible = true;\n\n    this.placeholder = createElementPlaceholder();\n\n    this.clone = this.element.cloneNode(true) as HTMLElement;\n  }\n\n  // Private method to show the element\n  private showElement() {\n    this.placeholder.replaceWith(this.element);\n    this.isVisible = true;\n  }\n\n  // Private method to hide the element\n  private hideElement() {\n    this.element.replaceWith(this.placeholder);\n    this.isVisible = false;\n  }\n\n  // Public method to fetch the market content for the element\n  private targetForMarket(market: Market) {\n    fetchMarketContent(market.link)\n      .then((doc) => {\n        const childElements = this.targetFor.map((targetElementValue) => {\n          const element = doc.querySelector<HTMLDivElement>(\n            `[data-child-for=\"${targetElementValue}\"]`\n          );\n          return { parent: targetElementValue, element };\n        });\n\n        // Find the parent elements on page and replace their child content with the new content\n        childElements.forEach(({ parent, element }) => {\n          const parentElement = document.querySelector<HTMLDivElement>(\n            `[data-target-for=\"${parent}\"]`\n          );\n          if (parentElement && element) {\n            parentElement.replaceChildren(element);\n          }\n        });\n      })\n      // eslint-disable-next-line no-console\n      .catch((error) => console.error(error));\n  }\n\n  // Private method to determine if the element is shown in a given market\n  private showInMarket(market: string) {\n    if (this.showIn.includes('Global') && !this.element.dataset.override) return;\n    const shouldShow = this.showIn.includes(market);\n    if (shouldShow && !this.isVisible) {\n      this.showElement();\n    } else if (!shouldShow && this.isVisible) {\n      this.hideElement();\n    }\n  }\n\n  // Private method to determine if the element is hiden in a given market\n  private hideInMarket(market: string) {\n    const shouldHide = this.hideIn.includes(market);\n    if (shouldHide && this.isVisible) {\n      this.hideElement();\n    } else if (!shouldHide && !this.isVisible) {\n      this.showElement();\n    }\n  }\n\n  // Private method to prioritise the element in a given market\n  private prioritiseInMarket(market: string) {\n    const shouldPrioritise = this.priorityIn === market;\n    if (shouldPrioritise) {\n      const { parentElement } = this.element;\n      if (!parentElement) return;\n      this.clone = this.element.cloneNode(true) as HTMLElement;\n      this.element.replaceWith(this.placeholder);\n\n      if (this.priorityOrder) {\n        placeElementAt(parentElement, this.clone, this.priorityOrder - 1);\n      } else {\n        parentElement.prepend(this.clone);\n      }\n    } else {\n      this.clone.remove();\n      this.placeholder.replaceWith(this.element);\n    }\n\n    document.dispatchEvent(new CustomEvent('refreshSplide'));\n  }\n\n  // Global method to update the visibility of the element in a given market\n  updateVisibilityForMarket(market: Market) {\n    if (this.targetFor.length > 0) this.targetForMarket(market);\n    if (this.showIn.length > 0) this.showInMarket(market.id);\n    if (this.hideIn.length > 0) this.hideInMarket(market.id);\n    if (this.priorityIn) this.prioritiseInMarket(market.id);\n  }\n}\n", "export const handleMarketParameter = (value: string): void => {\n  // Create a URL object\n  const urlObject = new URL(window.location.href);\n\n  // Set the new value for the market parameter\n  urlObject.searchParams.set('market', value);\n\n  // Use history.pushState to change the URL in the address bar without reloading\n  history.pushState({}, '', urlObject.toString());\n\n  // Save the new value in the local storage\n  sessionStorage.setItem('market', value);\n};\n", "/**\n * Dispatches a custom event that bubbles from the target.\n * @param target The element where the event will originate.\n * @param events The event name or an array of event names.\n * @returns True if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n */\nexport const simulateEvent = (target, events) => {\n    if (!Array.isArray(events))\n        events = [events];\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\n    return eventsSuccess.every((success) => success);\n};\n", "/**\n * @returns The Webflow Site ID of the website.\n * @param page The page to get the site ID from. Defaults to the current page.\n */\nexport const getSiteId = (page = document) => page.documentElement.getAttribute('data-wf-site');\n", "import { getSiteId } from '.';\n/**\n * Restarts the Webflow JS library.\n *\n * @param modules An array of {@link WebflowModule} to restart. If passed, only those modules will be restarted instead of the whole `Webflow` instance.\n *\n * @returns An awaitable promise that is fulfilled when the library has been correctly reinitialized.\n */\nexport const restartWebflow = async (modules) => {\n    const { Webflow } = window;\n    if (!Webflow || !('destroy' in Webflow) || !('ready' in Webflow) || !('require' in Webflow))\n        return;\n    if (modules && !modules.length)\n        return;\n    // Global\n    if (!modules) {\n        Webflow.destroy();\n        Webflow.ready();\n    }\n    // IX2\n    if (!modules || modules.includes('ix2')) {\n        const ix2 = Webflow.require('ix2');\n        if (ix2) {\n            const { store, actions } = ix2;\n            const { eventState } = store.getState().ixSession;\n            const stateEntries = Object.entries(eventState);\n            if (!modules)\n                ix2.destroy();\n            ix2.init();\n            await Promise.all(stateEntries.map((state) => store.dispatch(actions.eventStateChanged(...state))));\n        }\n    }\n    // Commerce\n    if (!modules || modules.includes('commerce')) {\n        const commerce = Webflow.require('commerce');\n        const siteId = getSiteId();\n        if (commerce && siteId) {\n            commerce.destroy();\n            commerce.init({ siteId, apiUrl: 'https://render.webflow.com' });\n        }\n    }\n    // Lightbox\n    if (modules?.includes('lightbox'))\n        Webflow.require('lightbox')?.ready();\n    // Slider\n    if (modules?.includes('slider')) {\n        const slider = Webflow.require('slider');\n        if (slider) {\n            slider.redraw();\n            slider.ready();\n        }\n    }\n    // Tabs\n    if (modules?.includes('tabs'))\n        Webflow.require('tabs')?.redraw();\n    return new Promise((resolve) => Webflow.push(() => resolve(undefined)));\n};\n", "export const shiftPage = () => {\n  window.scrollBy(0, 100);\n  window.scrollBy(0, -100);\n};\n", "import { restartWebflow } from '@finsweet/ts-utils';\n\nimport type { MarketSensitiveElement } from '../classes/marketSensitiveElement';\nimport type { Market } from '../type';\nimport { shiftPage } from '../utils/shiftPage';\n\nexport const handleMarketSensitiveElements = (\n  market: Market,\n  elements: MarketSensitiveElement[]\n) => {\n  elements.forEach((element) => element.updateVisibilityForMarket(market));\n\n  restartWebflow();\n  shiftPage();\n};\n", "/**\n * A function that sets the text of given elements to the current market\n * @param market - The current market string\n * @param elements - The elements to reflect the current market\n */\n\nexport const handleMirrorElements = (market: string, elements: HTMLElement[]): void => {\n  elements.forEach((element) => {\n    element.textContent = market;\n  });\n};\n", "/**\n * Fetches the \"market\" query parameter from the current URL or session storage\n * and applies the value to the market select\n *\n * @param marketSelect - The market select element\n */\nexport const applyMarket = (marketSelect: HTMLSelectElement): void => {\n  // Fetch the \"market\" query parameter from the URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const marketParam = urlParams.get('market');\n  const market = marketParam ? marketParam : sessionStorage.getItem('market');\n  if (!market) return;\n\n  // Check if the market exists in the select options\n  const optionExists = Array.from(marketSelect.options).some((option) => option.value === market);\n  if (!optionExists) return;\n\n  // Apply the value to the select if it exists\n  marketSelect.value = market;\n\n  // Emit the \"change\" event to trigger any attached event handlers\n  marketSelect.dispatchEvent(new Event('change'));\n};\n", "import { queryElement } from '../utils/queryElement';\nimport { queryElements } from '../utils/queryElements';\nimport { LanguageOption } from './classes/languageOptions';\nimport { MarketSensitiveElement } from './classes/marketSensitiveElement';\nimport { handleLangSensitiveElements } from './market/handleLangSensitiveElements';\nimport { handleMarketParameter } from './market/handleMarketParamter';\nimport { handleMarketSensitiveElements } from './market/handleMarketSensitiveElements';\nimport { handleMirrorElements } from './market/handleMirrorElements';\nimport type { Language, Market } from './type';\nimport { applyMarket } from './utils/applyMarket';\n\nexport const localisation = (): void => {\n  // Get references to the switcher, market and language elements\n  const attr = 'data-localise';\n  // const switcherLangs = queryElements<HTMLDivElement>(`[${attr}=\"switcher-lang\"]`);\n  const switcherIcons = queryElements<HTMLImageElement>(`[${attr}=\"switcher-icon\"]`);\n  const switcherMarkets = queryElements<HTMLImageElement>(`[${attr}=\"switcher-market\"]`);\n  const marketWrapper = queryElement<HTMLDivElement>(`[${attr}=\"market-wrapper\"]`);\n  const marketSelect = queryElement<HTMLSelectElement>(`[${attr}=\"market-select\"]`, marketWrapper);\n  const marketList = queryElement<HTMLDivElement>(`[${attr}=\"market-list\"]`);\n  // const langWrapper = queryElement<HTMLDivElement>(`[${attr}=\"lang-wrapper\"]`);\n  // const langSelect = queryElement<HTMLSelectElement>(`[${attr}=\"lang-select\"]`, langWrapper);\n\n  // Stop execution if necessary elements are not found\n  // if (!switcherLangs.length || !switcherIcons.length) return;\n  if (!marketSelect || !marketList) return;\n  // if (!langWrapper || !langSelect) return;\n\n  // Create a markets array from the links found within the market list\n  const marketLinks = queryElements<HTMLAnchorElement>('[data-localise=\"market-link\"]', marketList);\n  const marketIcons = queryElements<HTMLImageElement>('[data-localise=\"market-icon\"]', marketList);\n  const markets = marketLinks.map(\n    (marketLink, index): Market => ({\n      id: marketLink.textContent ?? '',\n      link: marketLink.href,\n      langCodes: marketLink.dataset?.langCodes?.split(', ') ?? [],\n      icon: marketIcons[index],\n    })\n  );\n\n  // // Get all markets that have multiple languages available\n  // const multiLanguageMarkets = markets\n  //   .filter((market) => market.langCodes.length > 1)\n  //   .map((market) => market.id)\n  //   .join(', ');\n\n  // // Set the data attributes for the selector languages\n  // switcherLangs.forEach((switcherLang) => {\n  //   switcherLang.dataset.showIn = multiLanguageMarkets;\n  // });\n\n  // // Initialise the languages\n  // // Create an array of languages to be added to the dropdown\n  // // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // declare const Weglot: any;\n  // const weglotLangs: Language[] = [\n  //   {\n  //     code: Weglot.options.language_from,\n  //     name: Weglot.getLanguageName(Weglot.options.language_from),\n  //   },\n  //   ...Weglot.options.languages.map((language: { language_to: string }) => {\n  //     return { code: language.language_to, name: Weglot.getLanguageName(language.language_to) };\n  //   }),\n  // ];\n\n  // // Create an array of language options to be added to the dropdown\n  // const langOptions = weglotLangs.map(({ code, name }) => new LanguageOption(code, name));\n  // langOptions.forEach((langOption) => {\n  //   langOption.appendTo(langSelect);\n  // });\n\n  // // Get the langCode from session storage\n  // const langCode = sessionStorage.getItem('langCode') ?? markets[0].langCodes[0];\n  // sessionStorage.setItem('langCode', langCode);\n  // langSelect.value = langCode;\n  // Weglot.switchTo(langCode);\n\n  // Get all elements that are market-sensitive\n  const marketSensitiveElements = queryElements<HTMLDivElement>(\n    '[data-target-for], [data-show-in], [data-hide-in], [data-priority-in]'\n  )\n    .map((element) => new MarketSensitiveElement(element as HTMLElement))\n    .reverse();\n\n  // Get mirror elements\n  const mirrorElements = queryElements<HTMLDivElement>('[data-localise=\"mirror-market\"]');\n\n  marketSelect.addEventListener('marketSelectReady', () => {\n    // Adding an event listener to update the UI when market selection changes\n    marketSelect.addEventListener('change', (event) => {\n      // Get the current market value and find the corresponding market object\n      const { value } = event.target as HTMLSelectElement;\n      const market = markets.find((market) => market.id === value) as Market;\n      if (!market) return;\n\n      handleMarketParameter(market.id);\n      // handleLangSensitiveElements(market, langOptions, langWrapper);\n      handleMarketSensitiveElements(market, marketSensitiveElements);\n      handleMirrorElements(market.id, mirrorElements);\n\n      switcherIcons.forEach((switcherIcon, index) => {\n        switcherIcon.src = market.icon.src;\n        switcherIcon.alt = market.icon.alt;\n        switcherMarkets[index].textContent = market.id;\n      });\n    });\n\n    // Apply the market from the query parameter or local storage\n    applyMarket(marketSelect);\n\n    // Handling initial market-specific visibility of elements if necessary\n    const market = markets.find((market) => market.id === marketSelect.value) as Market;\n    if (market === markets[0]) {\n      // handleLangSensitiveElements(market, langOptions, langWrapper);\n      handleMarketSensitiveElements(market, marketSensitiveElements);\n    }\n  });\n\n  // langSelect.addEventListener('change', (event) => {\n  //   const { value } = event.target as HTMLSelectElement;\n  //   sessionStorage.setItem('langCode', value);\n  //   Weglot.switchTo(value);\n  // });\n\n  // dispatch event once the market select element is ready\n  const numberOfMarkets = markets.length;\n  if (marketSelect.options.length === numberOfMarkets) {\n    const event = new Event('marketSelectReady');\n    marketSelect.dispatchEvent(event);\n  } else {\n    const observer = new MutationObserver((mutationsList, observer) => {\n      if (marketSelect.options.length === markets.length) {\n        observer.disconnect();\n        const event = new Event('marketSelectReady');\n        marketSelect.dispatchEvent(event);\n      }\n    });\n\n    observer.observe(marketSelect, { childList: true });\n  }\n};\n", "export const about = () => {};\n", "import type { CMSFilters } from '../../types/CMSFilters';\nimport type { Job } from './job';\n\nexport const jobs = () => {\n  /**\n   * Populate CMS Data from an external API.\n   */\n  window.fsAttributes = window.fsAttributes || [];\n  window.fsAttributes.push([\n    'cmsfilter',\n    async (filtersInstances: CMSFilters[]) => {\n      const [filtersInstance] = filtersInstances;\n      const { listInstance } = filtersInstance;\n      const [firstItem] = listInstance.items;\n      const itemTemplateElement = firstItem.element;\n\n      // Fetch external data\n      const jobs = await fetchJobs();\n\n      // Remove existing items\n      listInstance.clearItems();\n\n      // Create the new items\n      const newItems = jobs.map((job: Job) => createItem(job, itemTemplateElement));\n\n      // Populate the list\n      await listInstance.addItems(newItems);\n\n      // Get the filter lists\n      const filterLists = filtersInstance.form.querySelectorAll<HTMLDivElement>(\n        '[data-element=\"filter-list\"]'\n      );\n\n      // Loop through each filter list\n      for (const filterList of filterLists) {\n        // Get the template filter\n        const filterTemplateElement =\n          filterList.querySelector<HTMLLabelElement>('[data-element=\"filter\"]');\n        if (!filterTemplateElement) return;\n\n        // Get the parent wrapper\n        const filtersWrapper = filterTemplateElement.parentElement;\n        if (!filtersWrapper) return;\n\n        // Remove the template from the DOM\n        filterTemplateElement.remove();\n\n        // Collect the required property\n        const { property } = filterList.dataset;\n        if (!property) return;\n        const propertyValues = collectProperties(jobs, property as keyof Job);\n\n        // Create the new filters and append the to the parent wrapper\n        for (const propertyValue of propertyValues) {\n          const newFilter = createFilter(propertyValue as keyof Job, filterTemplateElement);\n          if (!newFilter) continue;\n\n          filtersWrapper.append(newFilter);\n        }\n      }\n\n      // Sync the CMSFilters instance with the new created filters\n      filtersInstance.storeFiltersData();\n    },\n  ]);\n\n  /**\n   * Fetches fake products from Fake Store API.\n   * @returns An array of {@link Product}.\n   */\n  const fetchJobs = async () => {\n    const config = {\n      emea: {\n        api: 'groupmemea_jobfeedapi_key',\n        sc: 'a1d19b3f3a21cdde1558794436300152',\n        subsidiaryName: 'Acceleration',\n      },\n      northAmerica: {\n        api: 'groupmnorthamerica_jobfeedapi_key',\n        sc: '60497c5c1cfa4d58341ec4060be40b2f',\n        subsidiaryName: 'GroupM%20Nexus%20Acceleration',\n      },\n    };\n\n    const endpoints: string[] = [];\n    Object.values(config).forEach((value) => {\n      endpoints.push(\n        `https://api.jobvite.com/api/v2/job?api=${value.api}&sc=${value.sc}&subsidiaryName=${value.subsidiaryName}`\n      );\n    });\n\n    const promises = endpoints.map((endpoint) => fetch(endpoint));\n\n    return Promise.all(promises)\n      .then((responses) => {\n        return Promise.all(responses.map((response) => response.json()));\n      })\n      .then((data) => {\n        const combinedList = data.reduce((acc, curr) => acc.concat(curr.requisitions), []);\n        const filteredList = combinedList.filter((job: Job) => job.distribution);\n        return filteredList;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  /**\n   * Creates an item from the template element.\n   * @param product The product data to create the item from.\n   * @param templateElement The template element.\n   *\n   * @returns A new Collection Item element.\n   */\n  const createItem = (job: Job, templateElement: HTMLDivElement) => {\n    // Clone the template element\n    const newItem = templateElement.cloneNode(true) as HTMLDivElement;\n\n    // Query inner elements\n    const title = newItem.querySelector<HTMLHeadingElement>('[data-job=\"title\"]');\n    const description = newItem.querySelector<HTMLDivElement>('[data-job=\"description\"]');\n    const country = newItem.querySelector<HTMLDivElement>('[data-job=\"country\"]');\n    const department = newItem.querySelector<HTMLDivElement>('[data-job=\"department\"]');\n    const apply = newItem.querySelector<HTMLAnchorElement>('[data-job=\"apply\"]');\n\n    // Populate inner elements\n    if (title) title.textContent = job.title;\n    if (description) description.textContent = job.briefDescription;\n    if (country) country.textContent = job.location;\n    if (department) department.textContent = job.category;\n    if (apply) apply.href = job.detailLink;\n\n    return newItem;\n  };\n\n  /**\n   * Collects all values for a given property from the jobs data.\n   * @param jobs The jobs data.\n   * @param property The property to collect.\n   *\n   * @returns An array of {@link Job} countries.\n   */\n  const collectProperties = <K extends keyof Job>(jobs: Job[], property: K) => {\n    const propertySet: Set<Job[K]> = new Set();\n\n    for (const job of jobs) {\n      propertySet.add(job[property]);\n    }\n\n    return [...propertySet];\n  };\n\n  /**\n   * Creates a new checkbox from the template element.\n   * @param category The filter value.\n   * @param templateElement The template element.\n   *\n   * @returns A new checkbox filter.\n   */\n  const createFilter = <V extends keyof Job>(\n    propertyValue: V,\n    templateElement: HTMLLabelElement\n  ) => {\n    // Clone the template element\n    const newFilter = templateElement.cloneNode(true) as HTMLLabelElement;\n\n    // Query inner elements\n    const label = newFilter.querySelector('span');\n    const radio = newFilter.querySelector('input');\n\n    if (!label || !radio) return;\n\n    // Populate inner elements\n    label.textContent = propertyValue;\n    radio.value = propertyValue;\n\n    return newFilter;\n  };\n};\n", "import { simulateEvent } from '@finsweet/ts-utils';\n\nexport const modals = () => {\n  let modalButtons = [...document.querySelectorAll('[data-modal-button]')];\n  const modalTriggers = [...document.querySelectorAll('[data-modal-trigger]')];\n\n  const arrowButtons = [...document.querySelectorAll('.splide__arrows')];\n  arrowButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      modalButtons = [...document.querySelectorAll('[data-modal-button]')];\n      updateEventListeners();\n    });\n  });\n\n  const updateEventListeners = () => {\n    modalButtons.forEach((button) => {\n      button.removeEventListener('click', openModal);\n      button.addEventListener('click', openModal);\n    });\n  };\n\n  const openModal = (event) => {\n    const button = event.currentTarget;\n    const modalSlug = button.dataset.modalButton;\n    const modalTrigger = modalTriggers.find(\n      (trigger) => trigger.dataset.modalTrigger === modalSlug\n    );\n    simulateEvent(modalTrigger, 'click');\n  };\n\n  updateEventListeners();\n};\n", "import { jobs } from './jobs';\nimport { modals } from './modals';\n\nexport const careers = () => {\n  jobs();\n  modals();\n};\n", "// Function to manage resource filters and dropdowns\nexport const dropdowns = (): void => {\n  // Convert NodeList of dropdown elements to an array\n  const dropdowns = Array.from(document.querySelectorAll<HTMLElement>('[data-filter=\"dropdown\"]'));\n\n  // Loop over each dropdown\n  dropdowns.forEach((dropdown) => {\n    // Get references to the toggle elements within the dropdown\n    const textToggle = dropdown.querySelector<HTMLElement>('[data-filter-toggle=\"text\"]');\n    const selectToggle = dropdown.querySelector<HTMLElement>('[data-filter-toggle=\"select\"]');\n    const selectedToggle = dropdown.querySelector<HTMLElement>('[data-filter-toggle=\"selected\"]');\n    const additionalToggle = dropdown.querySelector<HTMLElement>(\n      '[data-filter-toggle=\"additional\"]'\n    );\n    const toggles = [textToggle, selectToggle, selectedToggle, additionalToggle];\n\n    // Convert NodeList of filter inputs within dropdown to an array\n    const filters = Array.from(dropdown.querySelectorAll<HTMLInputElement>('input'));\n\n    // Loop over each filter input\n    filters.forEach((filter) => {\n      // Listen for change events on each filter input\n      filter.addEventListener('change', () => {\n        // By default, hide all toggle elements\n        toggles.forEach((toggle) => {\n          if (toggle) {\n            toggle.style.display = 'none';\n          }\n        });\n\n        // Get array of selected filter inputs within dropdown\n        const selected = Array.from(dropdown.querySelectorAll<HTMLInputElement>('input:checked'));\n\n        // Map selected filter inputs to an array of their names from dataset, filtering out any falsy values\n        const selectedValues = selected.map((input) => input.dataset.inputName).filter(Boolean);\n\n        // If no filter inputs are selected, show the textToggle\n        if (selectedValues.length === 0) {\n          if (textToggle) textToggle.style.display = 'block';\n        }\n        // If only one filter input is selected, show the selectedToggle with the selected value\n        else if (selectedValues.length === 1) {\n          if (selectedToggle) {\n            selectedToggle.textContent = selectedValues[0];\n            selectedToggle.style.display = 'inline';\n          }\n        }\n        // If more than one filter input is selected, show the selectedToggle with the first selected value\n        // and show the additionalToggle with the count of additional selected values\n        else if (selectedValues.length > 1) {\n          if (selectedToggle) {\n            selectedToggle.textContent = `${selectedValues[0]}, `;\n            selectedToggle.style.display = 'inline';\n          }\n          if (additionalToggle) {\n            additionalToggle.textContent = `+${selectedValues.length - 1}`;\n            additionalToggle.style.display = 'inline';\n          }\n        }\n      });\n    });\n  });\n};\n", "// Function to manage resource filters and dropdowns\nexport const filters = (): void => {\n  // Get reference to the filters wrapper element\n  const filtersWrapper = document.querySelector<HTMLElement>('[fs-cmsfilter-element=\"filters\"]');\n\n  // If no filters wrapper is found, stop function execution\n  if (!filtersWrapper) return;\n\n  // Convert NodeList of input elements within filtersWrapper to an array\n  const filters = Array.from(filtersWrapper.querySelectorAll<HTMLInputElement>('input'));\n\n  // Loop over each filter input\n  filters.forEach((filter) => {\n    // Extract input name from dataset\n    const name = filter.dataset.inputName;\n\n    // If no name is found in dataset, skip this iteration\n    if (!name) return;\n\n    // Generate id by transforming the name to lower case and replacing spaces with hyphens\n    const id = name.toLowerCase().replace(/\\s+/g, '-');\n\n    // Set the name and id of the filter input\n    filter.name = name;\n    filter.id = id;\n\n    // Get reference to the label that is the next sibling of the filter input\n    const label = filter.nextElementSibling as HTMLLabelElement;\n\n    // If label exists, set its 'for' attribute to link it to the filter input\n    if (label) {\n      label.setAttribute('for', filter.id);\n    }\n  });\n};\n", "/**\n * A function to check whether a given date is within the last X units of time\n * @param date - Date to compare\n * @param quantity - Number of units to compare\n * @param unit - Unit of time to compare\n * @returns - Whether the date is within the last X units of time\n */\n\nexport const isWithinLastXTime = (\n  date: Date,\n  quantity: number,\n  unit: 'minutes' | 'hours' | 'days' | 'months' | 'years'\n): boolean => {\n  const currentDate = new Date();\n  let timeDiffInMillis: number;\n\n  switch (unit) {\n    case 'minutes':\n      timeDiffInMillis = quantity * 60 * 1000; // Number of milliseconds in X minutes\n      break;\n    case 'hours':\n      timeDiffInMillis = quantity * 60 * 60 * 1000; // Number of milliseconds in X hours\n      break;\n    case 'days':\n      timeDiffInMillis = quantity * 24 * 60 * 60 * 1000; // Number of milliseconds in X days\n      break;\n    case 'months':\n      timeDiffInMillis = quantity * 30 * 24 * 60 * 60 * 1000; // Number of milliseconds in X months\n      break;\n    case 'years':\n      timeDiffInMillis = quantity * 365 * 24 * 60 * 60 * 1000; // Number of milliseconds in X years\n      break;\n    default:\n      throw new Error('Invalid time unit');\n  }\n\n  return currentDate.getTime() - date.getTime() <= timeDiffInMillis;\n};\n", "export const stringToDate = (dateString: string): Date => {\n  return new Date(dateString);\n};\n", "import { isWithinLastXTime } from '$utils/isWithinLastXTime';\nimport { queryElement } from '$utils/queryElement';\nimport { queryElements } from '$utils/queryElements';\nimport { stringToDate } from '$utils/stringToDate';\n\nexport const localisation = () => {\n  // Get all resources\n  const attr = 'data-localise';\n  const resources = queryElements<HTMLDivElement>(`[${attr}=\"resource\"]`);\n\n  // Loop through the resources\n  const currentResources = resources.filter((resource) => {\n    // Get the date text and convert it to a date object\n    const dateText = queryElement<HTMLDivElement>(`[${attr}=\"resource-date\"]`, resource);\n    if (!dateText?.textContent) return;\n    const date = stringToDate(dateText.textContent);\n\n    // Check if the date is within the last year\n    const isWithinAYear = isWithinLastXTime(date, 1, 'years');\n    return isWithinAYear;\n  });\n\n  // We will use a Map to group elements by their market\n  const marketGroups: Map<string, HTMLElement[]> = new Map();\n\n  // Loop over the resources and group them by their market\n  currentResources.forEach((currentResource) => {\n    const market = currentResource.dataset.priorityIn;\n    if (!market) return;\n    if (!marketGroups.has(market)) marketGroups.set(market, []);\n    marketGroups.get(market)?.push(currentResource);\n  });\n\n  // Now we loop over the groups and append the order attribute\n  for (const marketElements of marketGroups.values()) {\n    marketElements.forEach((element, index) => {\n      element.dataset.priorityOrder = `${index + 1}`;\n    });\n  }\n};\n", "import { dropdowns } from './dropdowns';\nimport { filters } from './filters';\nimport { localisation } from './localisation';\n\nexport const resources = () => {\n  filters();\n  dropdowns();\n  localisation();\n};\n", "import { createElement } from '$utils/createElement';\n\nexport const services = () => {\n  let numberLoaded = 0;\n  createElement('script', document.head, {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js',\n    defer: true,\n    callback: init,\n  });\n  createElement('script', document.head, {\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js',\n    defer: true,\n    callback: init,\n  });\n\n  const sticky = document.querySelector('[data-sticky=\"vertical-center\"]');\n  const top = `${(window.innerHeight - sticky.offsetHeight) / 2}px`;\n  sticky.style.top = top;\n\n  function init() {\n    numberLoaded += 1;\n    if (numberLoaded !== 2) return;\n\n    gsap.registerPlugin(ScrollTrigger);\n\n    const header = document.querySelector('.capabilities_header'),\n      items = [...document.querySelectorAll('.capabilities_list-item')],\n      targets = [...document.querySelectorAll('.capabilities_illustration')];\n\n    const mm = gsap.matchMedia();\n    mm.add('(min-width: 768px)', () => {\n      // const headerTl = gsap.timeline({\n      //   scrollTrigger: {\n      //     trigger: header,\n      //     start: `top ${top}`,\n      //     end: `bottom ${top}`,\n      //     scrub: true,\n      //   },\n      // });\n\n      // headerTl.to(targets, { opacity: 0.15, duration: 1 });\n\n      items.forEach((item, index) => {\n        const timeline = gsap.timeline({\n          scrollTrigger: {\n            trigger: item,\n            start: 'top 50%',\n            end: 'bottom 50%',\n            scrub: 1,\n          },\n        });\n\n        const target = targets.find((target) => target.classList.contains(`is-${index + 1}`));\n\n        timeline.to(target, { opacity: 1, duration: 1 });\n        // timeline.to(target, { opacity: 0.15, duration: 1 }, '<2');\n      });\n    });\n  }\n};\n", "import { about } from './about';\nimport { careers } from './careers';\nimport { resources } from './resources';\nimport { services } from './services';\n\nexport const pages = () => {\n  const { pathname } = window.location;\n  switch (pathname) {\n    case '/about-us':\n      about();\n      break;\n    case '/services':\n      services();\n      break;\n    case '/resources':\n      resources();\n      break;\n    case '/careers':\n      careers();\n      break;\n  }\n};\n", "import { initCopyURL } from '$utils/initCopyURL';\nimport { initSplide } from '$utils/initSplide';\n\nimport { localisation } from './localisation';\nimport { pages } from './pages';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  pages();\n  localisation();\n\n  const hasSplide = document.querySelector('.splide');\n  if (hasSplide) initSplide();\n\n  const hasCopyURL = document.querySelector('[data-copy-url]');\n  if (hasCopyURL) initCopyURL();\n});\n"],
  "mappings": "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",
  "names": ["URL", "location", "market", "observer", "jobs", "dropdowns", "filters", "filters", "localisation", "resources", "localisation", "target"]
}
